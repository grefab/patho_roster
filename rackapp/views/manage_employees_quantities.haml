:javascript
  function update_ui() {
    window.location.reload();
  }

  handle_working = function(employee_name) {
    var working = $(':input[id="check_working_' + employee_name + '"]:checked').val() !== undefined;

    set_working_for_employee(employee_name, working, null, update_ui)
  }

  $(function() {
    $('.changeable_cell').click(function() {
      var $cell = $(this);
      var old_content = $.trim($cell.html());

      $cell.html('<input type="text" style="width: 30px"/>');
      var $input_field = $cell.find("input");
      var abort_editing = function() {
        $input_field.remove();
        $cell.html(old_content);
      }

      var exit_handler = function() {
        var content = $input_field.val();
        $input_field.remove();

        if(content != old_content) {
          // find employee and task for this cell
          var $tr_employee = $cell.parent();
          var col = $tr_employee.children().index($cell);
          var $th_task = $tr_employee.parent().children().first().find(':nth-child('+(col+1)+')');

          var task = $.trim($th_task.html());
          var employee = $.trim($tr_employee.children().first().find('.employee_row_header').html());

          if(content.match(/^[1-9]\d*$|^0$/)) {
            // number we can use
            var number = parseInt(content);

            map_quantity(employee, task, number,
              function() {
                $cell.html(number);
              },
              function() {
                $cell.html("error");
              }
            );
          } else if(content.match(/^$/)) {
            // empty, so delete
            del_quantity(employee, task,
              function() {
                $cell.html("");
              },
              function() {
                $cell.html("error");
              }
            );
          } else {
            // nothing we can handle, so keep old stuff
            $cell.html(old_content);
          }
        } else {
          $cell.html(old_content);
        }
      }

      // configure input field to behave like we want to
      $input_field
        .val(old_content)
        .click(function() {
          // chew click events so the table cell does not generate a new input field
          return false;
        })
        .blur(exit_handler)
        .keydown(function(e) {
          switch(e.keyCode) {
            case 13: exit_handler(); break;
            case 27: abort_editing(); break;
          }
        })
        .focus();
    });
  });

%h1
  Manage Task Quantity Per Employee
%div
  - if engine.get_employees.empty?
    No employees defined yet.
  - else
    %table
      %tr
        %th
          -# empty because of employee rows
        - engine.get_tasks.each do |task|
          %th #{task.name}
      -#%tr
      -#  %th min
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:cap_min]}
      -#%tr
      -#  %th max
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:cap_max]}
      -#%tr
      -#  %th workload
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:workload]}
      - engine.get_employees.each do |employee|
        %tr
          %th
            %span
              - if employee.working
                %input{:id => "check_working_#{employee.name}", :type => "checkbox", :checked => "checked", :onchange => "handle_working(\"#{employee.name}\")"}
              - else
                %input{:id => "check_working_#{employee.name}", :type => "checkbox", :onchange => "handle_working(\"#{employee.name}\")"}
            %span{:class => "employee_row_header"}
              #{employee.name}
            %span
              %input{:type => "submit", :value => "Delete", :onclick => "del_employee(\"#{employee.name}\", update_ui)"}
          - engine.get_tasks.each do |task|
            %td{:class => "changeable_cell"}
              - mapping_per_employee = engine.get_mapping_for_employee employee.name
              - if mapping_per_employee[:quantity].has_key? task.name
                #{mapping_per_employee[:quantity][task.name]}

%div
  %label{:for => "new_employee_name"} Name:
  %input{:type => "text", :id => "new_employee_name"}
  %input{:type => "submit", :value => "Add", :onclick => "add_employee($(':input[id=\"new_employee_name\"]').val(), update_ui)"}
