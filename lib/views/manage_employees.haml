:javascript
  function encode_query_data(data)
  {
     var ret = [];
     for (var d in data)
        ret.push(encodeURIComponent(d) + "=" + encodeURIComponent(data[d]));
     return ret.join("&");
  }

  function update_ui() {
    window.location.reload();
  }


  add_employee = function() {
    var employee_name = $(':input[id="new_employee_name"]').val();

    $.ajax({
      url: "/api/add_employee?" + encode_query_data({"employee_name": employee_name}),
      success: function(data) {
        update_ui();
      },
    });
  }


  del_employee = function(employee_name) {
    $.ajax({
      url: "/api/delete_employee?" + encode_query_data({"employee_name": employee_name}),
      success: function(data) {
        update_ui();
      },
    });
  }

  map_task_to_employee = function(employee_name, task_name, workload, success_handler, error_handler) {
    $.ajax({
      url: "/api/map_task_to_employee?" + encode_query_data({
        "employee_name": employee_name,
        "task_name": task_name,
        "workload": workload
      }),
      success: success_handler,
      error: error_handler
    });
  }


  set_working_for_employee = function(employee_name) {
    var working = $(':input[id="check_working_' + employee_name + '"]:checked').val() !== undefined;

    $.ajax({
      url: "/api/set_working_for_employee?" + encode_query_data({
        "employee_name": employee_name,
        "working": working
      }),
      success: function(data) {
        //update_ui();
      },
      error: function() {
        update_ui();
      }
    });
  }

  $(function() {
    $('.changeable_cell').click(function() {
      var $cell = $(this);
      var old_content = $cell.html().trim();

      $cell.html('<input type="text" style="width: 30px"/>');
      var $input_field = $cell.find("input");
      var exit_handler = function() {
        var content = $input_field.val();
        $input_field.remove();

        if(content.match(/^[1-9]\d*$/)) {
          // number we can use
          var number = parseInt(content);

          // find employee and task for this cell
          var $tr_employee = $cell.parent();
          var col = $tr_employee.children().index($cell);
          var $th_task = $tr_employee.parent().children().first().find(':nth-child('+(col+1)+')');

          var task = $th_task.html().trim();
          var employee = $tr_employee.children().first().find('.employee_row_header').html().trim();

          map_task_to_employee(employee, task, number,
            function() {
              $cell.html(number);
            },
            function() {
              $cell.html("error");
            }
          );

        } else if(content.match(/^$|^0$/)) {
          // empty or zero, so delete
          //$cell.html("");
        } else {
          // nothing we can handle, so keep old stuff
          $cell.html(old_content);
        }
      }

      $input_field
        .val(old_content)
        .click(function() {
          return false;
        })
        .blur(exit_handler)
        .keypress(function(event) {
          if(event.which == 13) {
            exit_handler();
          }
        })
        .focus();
    });
  })

%h1
  Manage Employees
%div
  - if engine.get_all_employees.empty?
    No employees defined yet.
  - else
    %table
      %tr
        %th
          -# empty because of employee rows
        - engine.get_tasks.each do |task|
          %th #{task[:name]}
      -#%tr
      -#  %th min
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:cap_min]}
      -#%tr
      -#  %th max
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:cap_max]}
      -#%tr
      -#  %th workload
      -#  - engine.get_tasks.each do |task|
      -#    %td #{task[:workload]}
      - engine.get_all_employees.each do |employee|
        - employee_name = employee[:name]
        %tr
          %th
            %span
              - if employee[:working]
                %input{:id => "check_working_#{employee[:name]}", :type => "checkbox", :checked => "checked", :onchange => "set_working_for_employee(\"#{employee[:name]}\")"}
              - else
                %input{:id => "check_working_#{employee[:name]}", :type => "checkbox", :onchange => "set_working_for_employee(\"#{employee[:name]}\")"}
            %span{:class => "employee_row_header"}
              #{employee_name}
            %span
              %input{:type => "submit", :value => "Delete", :onclick => "del_employee(\"#{employee[:name]}\")"}
          - engine.get_tasks.each do |task|
            - task_name = task[:name]
            %td{:class => "changeable_cell"}
              - tasks_per_employee = engine.get_tasks_per_employee employee_name
              - if tasks_per_employee.has_key? task_name
                #{engine.get_tasks_per_employee(employee_name)[task_name]}

%div
  %label{:for => "new_employee_name"} Name:
  %input{:type => "text", :id => "new_employee_name"}
  %input{:type => "submit", :value => "Add", :onclick => "add_employee()"}
